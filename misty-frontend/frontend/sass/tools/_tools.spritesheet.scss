// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$pc-icon01: (165px, 0px, -165px, 0px, 46px, 40px, 211px, 168px, '../images/spritesheet.png', 'pc_icon01', );
$pc-icon01-on: (84px, 86px, -84px, -86px, 46px, 40px, 211px, 168px, '../images/spritesheet.png', 'pc_icon01_on', );
$pc-icon02: (165px, 78px, -165px, -78px, 46px, 38px, 211px, 168px, '../images/spritesheet.png', 'pc_icon02', );
$pc-icon02-on: (165px, 40px, -165px, -40px, 46px, 38px, 211px, 168px, '../images/spritesheet.png', 'pc_icon02_on', );
$pc-icon03: (42px, 130px, -42px, -130px, 42px, 38px, 211px, 168px, '../images/spritesheet.png', 'pc_icon03', );
$pc-icon03-on: (0px, 130px, 0px, -130px, 42px, 38px, 211px, 168px, '../images/spritesheet.png', 'pc_icon03_on', );
$pc-icon05: (111px, 0px, -111px, 0px, 54px, 40px, 211px, 168px, '../images/spritesheet.png', 'pc_icon05', );
$pc-icon05-on: (111px, 40px, -111px, -40px, 54px, 40px, 211px, 168px, '../images/spritesheet.png', 'pc_icon05_on', );
$pc-icon06: (0px, 50px, 0px, -50px, 64px, 36px, 211px, 168px, '../images/spritesheet.png', 'pc_icon06', );
$pc-icon06-on: (47px, 0px, -47px, 0px, 64px, 36px, 211px, 168px, '../images/spritesheet.png', 'pc_icon06_on', );
$pc-icon07: (0px, 86px, 0px, -86px, 42px, 44px, 211px, 168px, '../images/spritesheet.png', 'pc_icon07', );
$pc-icon07-on: (42px, 86px, -42px, -86px, 42px, 44px, 211px, 168px, '../images/spritesheet.png', 'pc_icon07_on', );
$pc-icon08: (0px, 0px, 0px, 0px, 47px, 50px, 211px, 168px, '../images/spritesheet.png', 'pc_icon08', );
$spritesheet-sprites: ($pc-icon01, $pc-icon01-on, $pc-icon02, $pc-icon02-on, $pc-icon03, $pc-icon03-on, $pc-icon05, $pc-icon05-on, $pc-icon06, $pc-icon06-on, $pc-icon07, $pc-icon07-on, $pc-icon08, );
$spritesheet: (211px, 168px, '../images/spritesheet.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
